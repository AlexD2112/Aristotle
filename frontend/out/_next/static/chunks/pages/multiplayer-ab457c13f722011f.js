(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[120],{2500:(e,a,n)=>{(window.__NEXT_P=window.__NEXT_P||[]).push(["/multiplayer",function(){return n(9288)}])},9288:(e,a,n)=>{"use strict";n.r(a),n.d(a,{default:()=>i});var t=n(7876),s=n(4232),r=n(5364);function i(){let[e,a]=(0,s.useState)(""),[n,i]=(0,s.useState)(""),[l,o]=(0,s.useState)(""),[c,d]=(0,s.useState)(""),[m,u]=(0,s.useState)(null),[p,y]=(0,s.useState)(null),[g,h]=(0,s.useState)(!1),[I,N]=(0,s.useState)([]),[j,C]=(0,s.useState)([""]),P=async()=>{try{let a=r.env.NEXT_PUBLIC_APPSYNC_URL,n=r.env.NEXT_PUBLIC_API_KEY,t=await fetch(a,{method:"POST",headers:{"Content-Type":"application/json","Access-Control-Allow-Origin":"*",...n?{"x-api-key":n}:{}},body:JSON.stringify({query:"\n        query P($g: ID!) {\n          listPlayers(gameId: $g) {\n            playerId\n            name\n            score\n            joinedAt\n          }\n        }\n      ",variables:{g:e}})}),s=await t.json();if(s.errors)throw Error(s.errors[0].message);N(s.data.listPlayers)}catch(e){y(e.message)}},_=async()=>{y(null);try{let a=r.env.NEXT_PUBLIC_APPSYNC_URL,n=r.env.NEXT_PUBLIC_API_KEY,t=await fetch(a,{method:"POST",headers:{"Content-Type":"application/json","Access-Control-Allow-Origin":"*",...n?{"x-api-key":n}:{}},body:JSON.stringify({query:"\n  mutation StartGame($gameId: ID!) {\n    startGame(gameId: $gameId) {\n      gameId\n      status\n      hostId\n      currentQ\n      createdAt\n      settings {\n        secondsPerQuestion\n      }\n    }\n  }\n",variables:{gameId:e}})}),s=await t.json();if(s.errors)throw Error(s.errors[0].message);console.log("Game started:",s.data.startGame)}catch(e){y(e.message)}},x=async()=>{h(!0),y(null);try{let e=r.env.NEXT_PUBLIC_APPSYNC_URL,n=r.env.NEXT_PUBLIC_API_KEY,t=parseInt(c)||20,s=await fetch(e,{method:"POST",headers:{"Content-Type":"application/json","Access-Control-Allow-Origin":"*",...n?{"x-api-key":n}:{}},body:JSON.stringify({query:"\n        mutation CreateGame($secondsPerQuestion: Int!) {\n          createGame(secondsPerQuestion: $secondsPerQuestion) {\n            gameId\n            settings {\n              secondsPerQuestion\n            }\n          }\n        }\n      ",variables:{secondsPerQuestion:t}})}),i=await s.json();if(i.errors)throw Error(i.errors[0].message);let o=i.data.createGame.gameId;a(o);let d=await fetch(e,{method:"POST",headers:{"Content-Type":"application/json","Access-Control-Allow-Origin":"*",...n?{"x-api-key":n}:{}},body:JSON.stringify({query:"\n        mutation JoinGame($gameId: ID!, $playerId: ID!, $name: String!) {\n          joinGame(gameId: $gameId, playerId: $playerId, name: $name) {\n            gameId\n            playerId\n            name\n            score\n            joinedAt\n          }\n        }\n      ",variables:{gameId:o,playerId:l,name:l}})}),m=await d.json();if(m.errors)throw Error(m.errors[0].message);u(!0),await P()}catch(e){y(e.message)}finally{h(!1)}},S=async()=>{h(!0),y(null),u(null);try{let a=r.env.NEXT_PUBLIC_APPSYNC_URL;console.log("Endpoint: ".concat(a));let n=r.env.NEXT_PUBLIC_API_KEY,t="\n        mutation JoinGame($gameId: ID!, $playerId: ID!, $name: String!) {\n          joinGame(gameId: $gameId, playerId: $playerId name: $name) {\n            gameId\n            playerId\n            name\n            score\n            joinedAt\n          }\n        }\n      ",s={gameId:e,playerId:l,name:l};console.log(JSON.stringify({query:t,variables:s}));let i=await fetch(a,{method:"POST",headers:{"Content-Type":"application/json","Access-Control-Allow-Origin":"*",...n?{"x-api-key":n}:{}},body:JSON.stringify({query:t,variables:s})}),o=await i.json();if(o.errors)throw Error(o.errors[0].message);u(!0),await P()}catch(e){y(e.message)}finally{h(!1)}};return(0,t.jsxs)("div",{className:"multiplayer-container",children:[(0,t.jsx)("h1",{className:"multiplayer-title",children:"Multiplayer Quiz"}),(0,t.jsx)("p",{className:"multiplayer-subtitle",children:"Join or create a quiz game with friends!"}),(0,t.jsx)("input",{type:"text",placeholder:"Display Name",value:l,onChange:e=>o(e.target.value),className:"multiplayer-input"}),!m&&(0,t.jsxs)("div",{className:"multiplayer-form",children:[(0,t.jsxs)("div",{className:"multiplayer-section",children:[(0,t.jsx)("h2",{children:"Join Game"}),(0,t.jsx)("p",{children:"Join an existing quiz game by entering your details."}),(0,t.jsx)("input",{type:"text",placeholder:"Game ID",value:e,onChange:e=>a(e.target.value),className:"multiplayer-input"}),(0,t.jsx)("button",{onClick:S,disabled:g,className:"multiplayer-button",children:g?"Joining...":"Join Game"})]}),(0,t.jsxs)("div",{className:"create-section",children:[(0,t.jsx)("h1",{children:"CREATE GAME"}),(0,t.jsx)("p",{children:"Create a game by entering the question bank ID:"}),(0,t.jsx)("input",{type:"text",placeholder:"Question Bank ID",value:j,onChange:e=>C(e.target.value),className:"multiplayer-input"}),(0,t.jsx)("button",{onClick:x,disabled:g,className:"multiplayer-button",children:g?"Creating...":"Create Game"})]})]}),p&&(0,t.jsxs)("div",{className:"error-message",children:["Error: ",p]}),m&&(0,t.jsxs)("div",{className:"multiplayer-section",children:[(0,t.jsxs)("div",{className:"start-section",children:[(0,t.jsx)("p",{children:"Seconds per question:"}),(0,t.jsx)("input",{type:"number",placeholder:"Seconds per question",defaultValue:20,onChange:e=>d(e.target.value),className:"multiplayer-input"}),(0,t.jsx)("button",{onClick:_,className:"multiplayer-button",children:"Start Game"})]}),(0,t.jsx)("h2",{children:"Current Players"}),(0,t.jsx)("div",{className:"players-grid",children:I.map(e=>(0,t.jsx)("div",{className:"player-card",children:e.name},e.playerId))})]})]})}}},e=>{e.O(0,[636,593,792],()=>e(e.s=2500)),_N_E=e.O()}]);